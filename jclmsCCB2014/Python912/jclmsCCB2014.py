# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_jclmsCCB2014', [dirname(__file__)])
        except ImportError:
            import _jclmsCCB2014
            return _jclmsCCB2014
        if fp is not None:
            try:
                _mod = imp.load_module('_jclmsCCB2014', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _jclmsCCB2014 = swig_import_helper()
    del swig_import_helper
else:
    import _jclmsCCB2014
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


EJC_SUSSESS = _jclmsCCB2014.EJC_SUSSESS
EJC_FAIL = _jclmsCCB2014.EJC_FAIL
EJC_INPUT_NULL = _jclmsCCB2014.EJC_INPUT_NULL
EJC_DATETIME_INVALID = _jclmsCCB2014.EJC_DATETIME_INVALID
EJC_VALIDRANGE_INVALID = _jclmsCCB2014.EJC_VALIDRANGE_INVALID
EJC_CLOSECODE_INVALID = _jclmsCCB2014.EJC_CLOSECODE_INVALID
EJC_CMDTYPE_TIMESTEP_INVALID = _jclmsCCB2014.EJC_CMDTYPE_TIMESTEP_INVALID
EJC_CMDTYPE_TIMELEN_INVALID = _jclmsCCB2014.EJC_CMDTYPE_TIMELEN_INVALID
EJC_CMDTYPE_INVALID = _jclmsCCB2014.EJC_CMDTYPE_INVALID
JCCMD_START = _jclmsCCB2014.JCCMD_START
JCCMD_INIT_CLOSECODE = _jclmsCCB2014.JCCMD_INIT_CLOSECODE
JCCMD_CCB_DYPASS1 = _jclmsCCB2014.JCCMD_CCB_DYPASS1
JCCMD_CCB_LOCK_VERCODE = _jclmsCCB2014.JCCMD_CCB_LOCK_VERCODE
JCCMD_CCB_DYPASS2 = _jclmsCCB2014.JCCMD_CCB_DYPASS2
JCCMD_CCB_CLOSECODE = _jclmsCCB2014.JCCMD_CCB_CLOSECODE
JCCMD_RESET_NFCKEY = _jclmsCCB2014.JCCMD_RESET_NFCKEY
JCCMD_RESET_LOCKTIME = _jclmsCCB2014.JCCMD_RESET_LOCKTIME
JCCMD_RESET_LOCKSYSTEM = _jclmsCCB2014.JCCMD_RESET_LOCKSYSTEM
JCCMD_GET_LOCKLOG = _jclmsCCB2014.JCCMD_GET_LOCKLOG
JCCMD_END = _jclmsCCB2014.JCCMD_END
JCI_START = _jclmsCCB2014.JCI_START
JCI_ATMNO = _jclmsCCB2014.JCI_ATMNO
JCI_LOCKNO = _jclmsCCB2014.JCI_LOCKNO
JCI_PSK = _jclmsCCB2014.JCI_PSK
JCI_DATETIME = _jclmsCCB2014.JCI_DATETIME
JCI_VALIDITY = _jclmsCCB2014.JCI_VALIDITY
JCI_CLOSECODE = _jclmsCCB2014.JCI_CLOSECODE
JCI_CMDTYPE = _jclmsCCB2014.JCI_CMDTYPE
JCI_TIMESTEP = _jclmsCCB2014.JCI_TIMESTEP
JCI_END = _jclmsCCB2014.JCI_END
class JCMATCH(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, JCMATCH, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, JCMATCH, name)
    __repr__ = _swig_repr
    __swig_setmethods__["s_datetime"] = _jclmsCCB2014.JCMATCH_s_datetime_set
    __swig_getmethods__["s_datetime"] = _jclmsCCB2014.JCMATCH_s_datetime_get
    if _newclass:s_datetime = _swig_property(_jclmsCCB2014.JCMATCH_s_datetime_get, _jclmsCCB2014.JCMATCH_s_datetime_set)
    __swig_setmethods__["s_validity"] = _jclmsCCB2014.JCMATCH_s_validity_set
    __swig_getmethods__["s_validity"] = _jclmsCCB2014.JCMATCH_s_validity_get
    if _newclass:s_validity = _swig_property(_jclmsCCB2014.JCMATCH_s_validity_get, _jclmsCCB2014.JCMATCH_s_validity_set)
    def __init__(self): 
        this = _jclmsCCB2014.new_JCMATCH()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _jclmsCCB2014.delete_JCMATCH
    __del__ = lambda self : None;
JCMATCH_swigregister = _jclmsCCB2014.JCMATCH_swigregister
JCMATCH_swigregister(JCMATCH)
cvar = _jclmsCCB2014.cvar
ZW_SYNCALG_BLOCK_SIZE = cvar.ZW_SYNCALG_BLOCK_SIZE
ZW_SM3_DGST_SIZE = cvar.ZW_SM3_DGST_SIZE

NUM_VALIDITY = _jclmsCCB2014.NUM_VALIDITY
JC_ATMNO_MAXLEN = _jclmsCCB2014.JC_ATMNO_MAXLEN
JC_LOCKNO_MAXLEN = _jclmsCCB2014.JC_LOCKNO_MAXLEN
JC_PSK_LEN = _jclmsCCB2014.JC_PSK_LEN
JC_INVALID_VALUE = _jclmsCCB2014.JC_INVALID_VALUE

def JcLockNew():
  return _jclmsCCB2014.JcLockNew()
JcLockNew = _jclmsCCB2014.JcLockNew

def JcLockDelete(*args):
  return _jclmsCCB2014.JcLockDelete(*args)
JcLockDelete = _jclmsCCB2014.JcLockDelete

def JcLockSetInt(*args):
  return _jclmsCCB2014.JcLockSetInt(*args)
JcLockSetInt = _jclmsCCB2014.JcLockSetInt

def JcLockSetString(*args):
  return _jclmsCCB2014.JcLockSetString(*args)
JcLockSetString = _jclmsCCB2014.JcLockSetString

def JcLockSetCmdType(*args):
  return _jclmsCCB2014.JcLockSetCmdType(*args)
JcLockSetCmdType = _jclmsCCB2014.JcLockSetCmdType

def JcLockCheckInput(*args):
  return _jclmsCCB2014.JcLockCheckInput(*args)
JcLockCheckInput = _jclmsCCB2014.JcLockCheckInput

def JcLockGetDynaCode(*args):
  return _jclmsCCB2014.JcLockGetDynaCode(*args)
JcLockGetDynaCode = _jclmsCCB2014.JcLockGetDynaCode

def JcLockReverseVerifyDynaCode(*args):
  return _jclmsCCB2014.JcLockReverseVerifyDynaCode(*args)
JcLockReverseVerifyDynaCode = _jclmsCCB2014.JcLockReverseVerifyDynaCode

def JcLockGetVersion():
  return _jclmsCCB2014.JcLockGetVersion()
JcLockGetVersion = _jclmsCCB2014.JcLockGetVersion

def JcLockDebugPrint(*args):
  return _jclmsCCB2014.JcLockDebugPrint(*args)
JcLockDebugPrint = _jclmsCCB2014.JcLockDebugPrint
ECIES_SUCCESS = _jclmsCCB2014.ECIES_SUCCESS
ECIES_FAIL = _jclmsCCB2014.ECIES_FAIL
ECIES_OUTPUT_BUFFER_TOO_SHORT = _jclmsCCB2014.ECIES_OUTPUT_BUFFER_TOO_SHORT
ECIES_PRIKEY_TOO_SHORT = _jclmsCCB2014.ECIES_PRIKEY_TOO_SHORT
ECIES_PUBKEY_TOO_SHORT = _jclmsCCB2014.ECIES_PUBKEY_TOO_SHORT
ECIES_HASH_TOO_SHORT = _jclmsCCB2014.ECIES_HASH_TOO_SHORT
ECIES_CRYPT_TOO_SHORT = _jclmsCCB2014.ECIES_CRYPT_TOO_SHORT
ECIES_ENCEDSYNCKEY_TOO_SHORT = _jclmsCCB2014.ECIES_ENCEDSYNCKEY_TOO_SHORT
ECIES_PLAIN_TOO_SHORT = _jclmsCCB2014.ECIES_PLAIN_TOO_SHORT
ECIES_PUBKEY_GEN_FAIL = _jclmsCCB2014.ECIES_PUBKEY_GEN_FAIL
ECIES_INPUT_TOO_SHORT = _jclmsCCB2014.ECIES_INPUT_TOO_SHORT
ECIES_PUBKEY_INVALID = _jclmsCCB2014.ECIES_PUBKEY_INVALID
ECIES_PRIKEY_INVALID = _jclmsCCB2014.ECIES_PRIKEY_INVALID
ECIES_INPUT_NULL = _jclmsCCB2014.ECIES_INPUT_NULL
ECIES_INIT_FLAG = _jclmsCCB2014.ECIES_INIT_FLAG
ECIES_PUBKEY = _jclmsCCB2014.ECIES_PUBKEY
ECIES_PRIKEY = _jclmsCCB2014.ECIES_PRIKEY
ECIES_ENCSYNCKEY = _jclmsCCB2014.ECIES_ENCSYNCKEY
ECIES_ENCHASH = _jclmsCCB2014.ECIES_ENCHASH
ECIES_ENCTEXT = _jclmsCCB2014.ECIES_ENCTEXT
ECIES_ENCALLOUT = _jclmsCCB2014.ECIES_ENCALLOUT

def zwEciesKeyPairGen(*args):
  return _jclmsCCB2014.zwEciesKeyPairGen(*args)
zwEciesKeyPairGen = _jclmsCCB2014.zwEciesKeyPairGen

def zwEciesEncrypt(*args):
  return _jclmsCCB2014.zwEciesEncrypt(*args)
zwEciesEncrypt = _jclmsCCB2014.zwEciesEncrypt

def zwEciesDecrypt(*args):
  return _jclmsCCB2014.zwEciesDecrypt(*args)
zwEciesDecrypt = _jclmsCCB2014.zwEciesDecrypt

def EciesGenKeyPair():
  return _jclmsCCB2014.EciesGenKeyPair()
EciesGenKeyPair = _jclmsCCB2014.EciesGenKeyPair

def EciesDelete(*args):
  return _jclmsCCB2014.EciesDelete(*args)
EciesDelete = _jclmsCCB2014.EciesDelete

def EciesGetPubKey(*args):
  return _jclmsCCB2014.EciesGetPubKey(*args)
EciesGetPubKey = _jclmsCCB2014.EciesGetPubKey

def EciesGetPriKey(*args):
  return _jclmsCCB2014.EciesGetPriKey(*args)
EciesGetPriKey = _jclmsCCB2014.EciesGetPriKey

def EciesEncrypt(*args):
  return _jclmsCCB2014.EciesEncrypt(*args)
EciesEncrypt = _jclmsCCB2014.EciesEncrypt

def EciesDecrypt(*args):
  return _jclmsCCB2014.EciesDecrypt(*args)
EciesDecrypt = _jclmsCCB2014.EciesDecrypt

def zwMergePsk(*args):
  return _jclmsCCB2014.zwMergePsk(*args)
zwMergePsk = _jclmsCCB2014.zwMergePsk
# This file is compatible with both classic and new-style classes.

ZWMEGA = cvar.ZWMEGA
ZWEFS = cvar.ZWEFS
ZW_EXA = cvar.ZW_EXA

