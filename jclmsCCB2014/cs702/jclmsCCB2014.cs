/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace jclms {

public class jclmsCCB2014 {
  public static int ZW_SYNCALG_BLOCK_SIZE {
    get {
      int ret = jclmsCCB2014PINVOKE.ZW_SYNCALG_BLOCK_SIZE_get();
      return ret;
    } 
  }

  public static int ZW_SM3_DGST_SIZE {
    get {
      int ret = jclmsCCB2014PINVOKE.ZW_SM3_DGST_SIZE_get();
      return ret;
    } 
  }

  public static int JcLockNew() {
    int ret = jclmsCCB2014PINVOKE.JcLockNew();
    return ret;
  }

  public static int JcLockDelete(int handle) {
    int ret = jclmsCCB2014PINVOKE.JcLockDelete(handle);
    return ret;
  }

  public static JCERROR JcLockSetInt(int handle, JCITYPE mtype, int num) {
    JCERROR ret = (JCERROR)jclmsCCB2014PINVOKE.JcLockSetInt(handle, (int)mtype, num);
    return ret;
  }

  public static JCERROR JcLockSetString(int handle, JCITYPE mtype, string str) {
    JCERROR ret = (JCERROR)jclmsCCB2014PINVOKE.JcLockSetString(handle, (int)mtype, str);
    return ret;
  }

  public static JCERROR JcLockSetCmdType(int handle, JCITYPE mtype, JCCMD cmd) {
    JCERROR ret = (JCERROR)jclmsCCB2014PINVOKE.JcLockSetCmdType(handle, (int)mtype, (int)cmd);
    return ret;
  }

  public static JCERROR JcLockCheckInput(int handle) {
    JCERROR ret = (JCERROR)jclmsCCB2014PINVOKE.JcLockCheckInput(handle);
    return ret;
  }

  public static int JcLockGetDynaCode(int handle) {
    int ret = jclmsCCB2014PINVOKE.JcLockGetDynaCode(handle);
    return ret;
  }

  public static JCMATCH JcLockReverseVerifyDynaCode(int handle, int dstCode) {
    JCMATCH ret = new JCMATCH(jclmsCCB2014PINVOKE.JcLockReverseVerifyDynaCode(handle, dstCode), true);
    return ret;
  }

  public static int JcLockGetVersion() {
    int ret = jclmsCCB2014PINVOKE.JcLockGetVersion();
    return ret;
  }

  public static void JcLockDebugPrint(int handle) {
    jclmsCCB2014PINVOKE.JcLockDebugPrint(handle);
  }

  public static void zwJcLockDumpJCINPUT(int handle) {
    jclmsCCB2014PINVOKE.zwJcLockDumpJCINPUT(handle);
  }

  public static int ZWMEGA {
    get {
      int ret = jclmsCCB2014PINVOKE.ZWMEGA_get();
      return ret;
    } 
  }

  public static int zwSM3StandardTestVector() {
    int ret = jclmsCCB2014PINVOKE.zwSM3StandardTestVector();
    return ret;
  }

  public static int csJclmsReqGenDyCode(int lmsHandle) {
    int ret = jclmsCCB2014PINVOKE.csJclmsReqGenDyCode(lmsHandle);
    return ret;
  }

  public static int zwJclmsReqVerifyDyCode(int lmsHandle, int dstCode, JCMATCH match) {
    int ret = jclmsCCB2014PINVOKE.zwJclmsReqVerifyDyCode(lmsHandle, dstCode, JCMATCH.getCPtr(match));
    return ret;
  }

  public static int zwLmsAlgStandTest20141203() {
    int ret = jclmsCCB2014PINVOKE.zwLmsAlgStandTest20141203();
    return ret;
  }

  public static int zwLmsAlgStandTest20141216GenPass1() {
    int ret = jclmsCCB2014PINVOKE.zwLmsAlgStandTest20141216GenPass1();
    return ret;
  }

  public static int zwLmsAlgStandTest20141216VerifyPass1() {
    int ret = jclmsCCB2014PINVOKE.zwLmsAlgStandTest20141216VerifyPass1();
    return ret;
  }

  public static void myPureHidTestDataGen20141216() {
    jclmsCCB2014PINVOKE.myPureHidTestDataGen20141216();
  }

  public static int ZWEFS {
    get {
      int ret = jclmsCCB2014PINVOKE.ZWEFS_get();
      return ret;
    } 
  }

  public static int ZW_EXA {
    get {
      int ret = jclmsCCB2014PINVOKE.ZW_EXA_get();
      return ret;
    } 
  }

  public static int zwEciesKeyPairGen(string password, string outPriKeyStr, int priLen, string outPublicKeyStr, int pubLen) {
    int ret = jclmsCCB2014PINVOKE.zwEciesKeyPairGen(password, outPriKeyStr, priLen, outPublicKeyStr, pubLen);
    return ret;
  }

  public static int zwEciesEncrypt(string pubkeyStr, string PlainText, string outEncryptedSyncKeyStr, int syncKeyLen, string outMsgHashStr, int hashLen, string outCryptedTextStr, int cryptLen) {
    int ret = jclmsCCB2014PINVOKE.zwEciesEncrypt(pubkeyStr, PlainText, outEncryptedSyncKeyStr, syncKeyLen, outMsgHashStr, hashLen, outCryptedTextStr, cryptLen);
    return ret;
  }

  public static int zwEciesDecrypt(string prikeyStr, string outPlainText, int plainLen, string EncryptedSyncKeyStr, string MsgHashStr, string CryptedTextStr) {
    int ret = jclmsCCB2014PINVOKE.zwEciesDecrypt(prikeyStr, outPlainText, plainLen, EncryptedSyncKeyStr, MsgHashStr, CryptedTextStr);
    return ret;
  }

  public static int EciesGenKeyPair() {
    int ret = jclmsCCB2014PINVOKE.EciesGenKeyPair();
    return ret;
  }

  public static void EciesDelete(int eciesHandle) {
    jclmsCCB2014PINVOKE.EciesDelete(eciesHandle);
  }

  public static string EciesGetPubKey(int eciesHandle) {
    string ret = jclmsCCB2014PINVOKE.EciesGetPubKey(eciesHandle);
    return ret;
  }

  public static string EciesGetPriKey(int eciesHandle) {
    string ret = jclmsCCB2014PINVOKE.EciesGetPriKey(eciesHandle);
    return ret;
  }

  public static string EciesEncrypt(string pubKey, string plainText) {
    string ret = jclmsCCB2014PINVOKE.EciesEncrypt(pubKey, plainText);
    return ret;
  }

  public static string EciesDecrypt(string priKey, string cryptText) {
    string ret = jclmsCCB2014PINVOKE.EciesDecrypt(priKey, cryptText);
    return ret;
  }

  public static string zwMergePsk(string pskInput) {
    string ret = jclmsCCB2014PINVOKE.zwMergePsk(pskInput);
    return ret;
  }

  public static readonly int NUM_VALIDITY = jclmsCCB2014PINVOKE.NUM_VALIDITY_get();
  public static readonly int JC_ATMNO_MAXLEN = jclmsCCB2014PINVOKE.JC_ATMNO_MAXLEN_get();
  public static readonly int JC_LOCKNO_MAXLEN = jclmsCCB2014PINVOKE.JC_LOCKNO_MAXLEN_get();
  public static readonly int JC_PSK_LEN = jclmsCCB2014PINVOKE.JC_PSK_LEN_get();
  public static readonly int JC_INVALID_VALUE = jclmsCCB2014PINVOKE.JC_INVALID_VALUE_get();
}

}
