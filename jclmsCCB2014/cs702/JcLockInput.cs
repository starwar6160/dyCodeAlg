/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class JcLockInput : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal JcLockInput(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(JcLockInput obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~JcLockInput() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          jclmsccbPINVOKE.delete_JcLockInput(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public string m_atmno {
    set {
      jclmsccbPINVOKE.JcLockInput_m_atmno_set(swigCPtr, value);
      if (jclmsccbPINVOKE.SWIGPendingException.Pending) throw jclmsccbPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = jclmsccbPINVOKE.JcLockInput_m_atmno_get(swigCPtr);
      if (jclmsccbPINVOKE.SWIGPendingException.Pending) throw jclmsccbPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public string m_lockno {
    set {
      jclmsccbPINVOKE.JcLockInput_m_lockno_set(swigCPtr, value);
      if (jclmsccbPINVOKE.SWIGPendingException.Pending) throw jclmsccbPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = jclmsccbPINVOKE.JcLockInput_m_lockno_get(swigCPtr);
      if (jclmsccbPINVOKE.SWIGPendingException.Pending) throw jclmsccbPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public string m_psk {
    set {
      jclmsccbPINVOKE.JcLockInput_m_psk_set(swigCPtr, value);
      if (jclmsccbPINVOKE.SWIGPendingException.Pending) throw jclmsccbPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = jclmsccbPINVOKE.JcLockInput_m_psk_get(swigCPtr);
      if (jclmsccbPINVOKE.SWIGPendingException.Pending) throw jclmsccbPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public int m_datetime {
    set {
      jclmsccbPINVOKE.JcLockInput_m_datetime_set(swigCPtr, value);
    } 
    get {
      int ret = jclmsccbPINVOKE.JcLockInput_m_datetime_get(swigCPtr);
      return ret;
    } 
  }

  public int m_validity {
    set {
      jclmsccbPINVOKE.JcLockInput_m_validity_set(swigCPtr, value);
    } 
    get {
      int ret = jclmsccbPINVOKE.JcLockInput_m_validity_get(swigCPtr);
      return ret;
    } 
  }

  public int m_closecode {
    set {
      jclmsccbPINVOKE.JcLockInput_m_closecode_set(swigCPtr, value);
    } 
    get {
      int ret = jclmsccbPINVOKE.JcLockInput_m_closecode_get(swigCPtr);
      return ret;
    } 
  }

  public int m_cmdtype {
    set {
      jclmsccbPINVOKE.JcLockInput_m_cmdtype_set(swigCPtr, value);
    } 
    get {
      int ret = jclmsccbPINVOKE.JcLockInput_m_cmdtype_get(swigCPtr);
      return ret;
    } 
  }

  public JcLockInput() : this(jclmsccbPINVOKE.new_JcLockInput(), true) {
  }

  public void print() {
    jclmsccbPINVOKE.JcLockInput_print(swigCPtr);
  }

  public JCERROR check() {
    JCERROR ret = (JCERROR)jclmsccbPINVOKE.JcLockInput_check(swigCPtr);
    return ret;
  }

}
